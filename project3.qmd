---
title: "COVID-19 Dashboard"
format:
  dashboard:
    orientation: columns
---

```{r load-packages}
library(ggplot2)
library(plotly)
library(dplyr)
```

## Column 1 {width="60%"}

```{r}
#| title: Average Daily Positive Cases vs Quantity of Testing

covid_data <- read.csv("tested_worldwide.csv") %>% 
  mutate(Date = as.Date(Date, format = "%Y-%m-%d"))

daily_positive_tested <- covid_data %>%  
  group_by(Country_Region) %>% 
  summarize(
    avg_positive = mean(daily_positive, na.rm = TRUE),
    avg_tested = mean(daily_tested, na.rm = TRUE),
    positive_rate = avg_positive/avg_tested
  )

positive_tested_chart <- ggplot(
  daily_positive_tested %>%
    filter(
      !is.na(avg_positive) & !is.na(avg_tested) & !is.na(positive_rate),
      avg_positive > 0,
      avg_tested > 0,
      positive_rate > 0
    ),
  mapping = aes(
    x = avg_positive,
    y = avg_tested,
    color = positive_rate,
    text = paste("Country:", Country_Region)
  )) +
  geom_point() +
  scale_x_log10() +
  scale_y_log10() +
  labs(
    x = "Average Daily Positive Cases",
    y = "Average Daily Quantity of Tests",
    color = "Positivity Rate"
  ) +
  theme_minimal()

positive_tested_interactive <- ggplotly(positive_tested_chart)
positive_tested_interactive
```

## Column 2 {width="40%"}

```{r}
#| title: Percent of Population Hospitalized Over Time

hospital_data <- read.csv("tested_worldwide.csv") %>%
  mutate(
    Date = as.Date(Date),
    hospitalizedCurr = as.numeric(hospitalizedCurr)
  ) %>%
  filter(!is.na(hospitalizedCurr)) %>%
  group_by(Date, Country_Region) %>%
  summarise(current_hospitalized = sum(hospitalizedCurr, na.rm = TRUE), .groups = "drop")

population_data <- read.csv("world_population.csv") %>%
  select(Country = Country.Territory, Population2020 = X2020.Population) %>%
  mutate(Population2020 = as.numeric(gsub(",", "", Population2020)))

merged_data <- hospital_data %>%
  left_join(population_data, by = c("Country_Region" = "Country")) %>%
  filter(!is.na(Population2020)) %>%
  mutate(hospitalized_pct = (current_hospitalized / Population2020) * 100) %>% 
  filter(!Country_Region %in% c("Armenia", "Singapore"))
# Armenia and Singapore had invalid data

countries <- unique(merged_data$Country_Region)

hosp_interactive <- plot_ly()

for (country in countries) {
  country_data <- merged_data %>% filter(Country_Region == country)
  hosp_interactive <- hosp_interactive %>%
    add_trace(
      x = country_data$Date,
      y = country_data$hospitalized_pct,
      type = "scatter",
      mode = "lines+markers",
      name = country
    )
}

hosp_interactive <- hosp_interactive %>%
  layout(
    xaxis = list(title = "Date"),
    yaxis = list(title = "Hospitalizations (Percent of Population)"),
    hovermode = "compare"
  )

hosp_interactive
```

```{r}
#| title: Cumulative Deaths Over Time

death_data <- read.csv("tested_worldwide.csv") %>%
  mutate(
    Date = as.Date(Date),
    death = as.numeric(death)
  ) %>%
  filter(!is.na(death)) %>%
  filter(!Country_Region %in% "Canada") %>% 
  group_by(Date, Country_Region) %>%
  summarise(death = sum(death, na.rm = TRUE), .groups = "drop")

countries <- unique(death_data$Country_Region)

deaths_interactive <- plot_ly()

for (country in countries) {
  df <- death_data %>% filter(Country_Region == country)
  
  deaths_interactive <- add_trace(deaths_interactive,
                 data = df,
                 x = ~Date,
                 y = ~death,
                 type = 'scatter',
                 mode = 'lines+markers',
                 name = country,
                 text = ~paste("Country:", Country_Region,
                               "<br>Date:", Date,
                               "<br>Deaths:", death),
                 hoverinfo = "text")
}

deaths_interactive <- layout(deaths_interactive,
            title = "COVID Deaths Over Time",
            xaxis = list(title = "Date"),
            yaxis = list(title = "Cumulative Deaths"),
            hovermode = "compare")

deaths_interactive
```