---
title: "COVID-19 Dashboard"
format:
  dashboard:
    orientation: columns
---

```{r load-packages}
library(ggplot2)
library(plotly)
library(dplyr)
```

## Column 1 {width="60%"}

```{r}
#| title: Average Daily Positive Cases vs Quantity of Testing

covid_data <- read.csv("tested_worldwide.csv") %>% 
  mutate(Date = as.Date(Date, format = "%Y-%m-%d"), 
  Month = format(Date, "%Y-%m")) %>% 
  filter(!is.na(Date))

unique_months <- sort(unique(covid_data$Month))

daily_positive_tested <- covid_data %>%  
  group_by(Country_Region, Month) %>% 
  summarize(
    avg_positive = mean(daily_positive, na.rm = TRUE),
    avg_tested = mean(daily_tested, na.rm = TRUE),
    positive_rate = avg_positive/avg_tested,
    .groups = "drop"
  ) %>% 
  filter(!is.na(avg_positive) & !is.na(avg_tested) & !is.na(positive_rate),
      avg_positive > 0,
      avg_tested > 0,
      positive_rate > 0
  )

  interactive_plot <- plot_ly(
    data = daily_positive_tested,
    x = ~avg_positive,
    y = ~avg_tested,
    type = 'scatter',
    mode = 'markers',
    marker = list(
      size = 10,
      opacity = 0.7, 
      color = ~positive_rate,
      colorscale = 'Viridis',
      colorbar = list(
        title = 'Positivity Rate'
      )
    ),
    text = ~paste("Country:", Country_Region, 
                  "<br>Month:", Month,
                  "<br>Positivity Rate:", round(positive_rate*100, 2), "%",
                  "<br>Average Daily Cases:", avg_positive,
                  "<br>Average Daily Tests:", avg_tested),
    hoverinfo = 'text'
  )

  interactive_plot <- interactive_plot %>% layout(
    xaxis = list(
      type = "log",
      title = "Average Daily Positive Cases",
      dtick = 1,
      tickmode = "array",
      tickvals = 10^(0:10),
      ticktext = 10^(0:10)
    ),
    yaxis = list(
      type = "log",
      title = "Average Daily Quantity of Tests",
      dtick = 1,
      tickmode = "array",
      tickvals = 10^(0:10),
      ticktext = 10^(0:10)
    ),
    title = list(text = "Average Daily Positive Cases vs Quantity of Testing - All Months", font = list(size = 16)),
    showlegend = FALSE,
    margin = list(t = 100),
    autosize = TRUE,
    height = 600
  )

buttons <- list()

buttons[[1]] <- list(
  method = "update",
  args = list(
    list(
      x = list(daily_positive_tested$avg_positive),
      y = list(daily_positive_tested$avg_tested),
      text = list(paste("Country:", daily_positive_tested$Country_Region, 
                         "<br>Month:", daily_positive_tested$Month,
                         "<br>Positivity Rate:", round(daily_positive_tested$positive_rate*100, 2), "%",
                         "<br>Average Daily Cases:",daily_positive_tested$avg_positive,
                         "<br>Average Daily Tests:",daily_positive_tested$avg_tested)),
      marker = list(
        color = daily_positive_tested$positive_rate,
        colorscale = 'Viridis',
        colorbar = list(
          title = list(
            text = 'Positivity Rate'
          )
        ),
        size = 10,
        opacity = 0.7
      )
    ),
    list(title = "Average Daily Positive Cases vs Quantity of Testing - All Months")
  ),
  label = "All Months"
)

for (i in 1:length(unique_months)) {
  month_data <- daily_positive_tested %>% filter(Month == unique_months[i])
  
  if (nrow(month_data) > 0) {
    buttons[[i + 1]] <- list(
      method = "update",
      args = list(
        list(
          x = list(month_data$avg_positive),
          y = list(month_data$avg_tested),
          text = list(paste("Country:", month_data$Country_Region, 
                           "<br>Month:", month_data$Month,
                           "<br>Positivity Rate:", round(month_data$positive_rate*100, 2), "%",
                           "<br>Average Daily Cases:", month_data$avg_positive,
                           "<br>Average Daily Tests:",month_data$avg_tested)),
          marker = list(
            color = month_data$positive_rate,
            colorscale = 'Viridis',
            colorbar = list(
              title = list(
                text = 'Positivity Rate'
              )
            ),
            size = 10,
            opacity = 0.7
          )
        ),
        list(title = paste("Average Daily Positive Cases vs Quantity of Testing -", unique_months[i]))
      ),
      label = unique_months[i]
    )
  }
}

interactive_plot <- interactive_plot %>% layout(
  updatemenus = list(
    list(
      active = 0,
      buttons = buttons,
      direction = "down",
      showactive = TRUE
    )
  )
)

interactive_plot
```

## Column 2 {width="40%"}

```{r}
#| title: Percent of Population Hospitalized Over Time

hospital_data <- read.csv("tested_worldwide.csv") %>%
  mutate(
    Date = as.Date(Date),
    hospitalizedCurr = as.numeric(hospitalizedCurr)
  ) %>%
  filter(!is.na(hospitalizedCurr)) %>%
  group_by(Date, Country_Region) %>%
  summarise(current_hospitalized = sum(hospitalizedCurr, na.rm = TRUE), .groups = "drop")

population_data <- read.csv("world_population.csv") %>%
  select(Country = Country.Territory, Population2020 = X2020.Population) %>%
  mutate(Population2020 = as.numeric(gsub(",", "", Population2020)))

merged_data <- hospital_data %>%
  left_join(population_data, by = c("Country_Region" = "Country")) %>%
  filter(!is.na(Population2020)) %>%
  mutate(hospitalized_pct = (current_hospitalized / Population2020) * 100) %>% 
  filter(!Country_Region %in% c("Armenia", "Singapore"))
# Armenia and Singapore had invalid data

countries <- unique(merged_data$Country_Region)

hosp_interactive <- plot_ly()

for (country in countries) {
  country_data <- merged_data %>% filter(Country_Region == country)
  hosp_interactive <- hosp_interactive %>%
    add_trace(
      x = country_data$Date,
      y = country_data$hospitalized_pct,
      type = "scatter",
      mode = "lines+markers",
      name = country
    )
}

hosp_interactive <- hosp_interactive %>%
  layout(
    xaxis = list(title = "Date"),
    yaxis = list(title = "Hospitalizations (Percent of Population)"),
    hovermode = "compare"
  )

hosp_interactive
```

```{r}
#| title: Cumulative Deaths Over Time

death_data <- read.csv("tested_worldwide.csv") %>%
  mutate(
    Date = as.Date(Date),
    death = as.numeric(death)
  ) %>%
  filter(!is.na(death)) %>%
  filter(!Country_Region %in% "Canada") %>% 
  group_by(Date, Country_Region) %>%
  summarise(death = sum(death, na.rm = TRUE), .groups = "drop")

countries <- unique(death_data$Country_Region)

deaths_interactive <- plot_ly()

for (country in countries) {
  df <- death_data %>% filter(Country_Region == country)
  
  deaths_interactive <- add_trace(deaths_interactive,
                 data = df,
                 x = ~Date,
                 y = ~death,
                 type = 'scatter',
                 mode = 'lines+markers',
                 name = country,
                 text = ~paste("Country:", Country_Region,
                               "<br>Date:", Date,
                               "<br>Deaths:", death),
                 hoverinfo = "text")
}

deaths_interactive <- layout(deaths_interactive,
            title = "COVID Deaths Over Time",
            xaxis = list(title = "Date"),
            yaxis = list(title = "Cumulative Deaths"),
            hovermode = "compare")

deaths_interactive
```