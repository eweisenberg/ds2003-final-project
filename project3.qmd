---
title: "COVID-19 Dashboard"
format:
  dashboard:
    orientation: columns
---

```{r load-packages}
library(ggplot2)
library(plotly)
library(dplyr)
```

# Dashboard

## Column 1 {width="60%"}

```{r}
#| title: Average Daily Positive Cases vs Quantity of Testing

covid_data <- read.csv("tested_worldwide.csv") %>% 
  mutate(Date = as.Date(Date, format = "%Y-%m-%d"), 
  Month = format(Date, "%Y-%m")) %>% 
  filter(!is.na(Date))

unique_months <- sort(unique(covid_data$Month))

daily_positive_tested <- covid_data %>%  
  group_by(Country_Region, Month) %>% 
  summarize(
    avg_positive = mean(daily_positive, na.rm = TRUE),
    avg_tested = mean(daily_tested, na.rm = TRUE),
    positive_rate = avg_positive/avg_tested,
    .groups = "drop"
  ) %>% 
  filter(!is.na(avg_positive) & !is.na(avg_tested) & !is.na(positive_rate),
      avg_positive > 0,
      avg_tested > 0,
      positive_rate > 0
  )

  interactive_plot <- plot_ly(
    data = daily_positive_tested,
    x = ~avg_positive,
    y = ~avg_tested,
    type = 'scatter',
    mode = 'markers',
    marker = list(
      size = 10,
      opacity = 0.7, 
      color = ~positive_rate,
      colorscale = 'Viridis',
      colorbar = list(
        title = 'Positivity Rate'
      )
    ),
    text = ~paste("Country:", Country_Region, 
                  "<br>Month:", Month,
                  "<br>Positivity Rate:", round(positive_rate*100, 2), "%",
                  "<br>Average Daily Cases:", avg_positive,
                  "<br>Average Daily Tests:", avg_tested),
    hoverinfo = 'text'
  )

  interactive_plot <- interactive_plot %>% layout(
    xaxis = list(
      type = "log",
      title = "Average Daily Positive Cases",
      dtick = 1,
      tickmode = "array",
      tickvals = 10^(0:10),
      ticktext = 10^(0:10)
    ),
    yaxis = list(
      type = "log",
      title = "Average Daily Quantity of Tests",
      dtick = 1,
      tickmode = "array",
      tickvals = 10^(0:10),
      ticktext = 10^(0:10)
    ),
    showlegend = FALSE,
    margin = list(t = 100),
    autosize = TRUE,
    height = 600
  )

buttons <- list()

buttons[[1]] <- list(
  method = "update",
  args = list(
    list(
      x = list(daily_positive_tested$avg_positive),
      y = list(daily_positive_tested$avg_tested),
      text = list(paste("Country:", daily_positive_tested$Country_Region, 
                         "<br>Month:", daily_positive_tested$Month,
                         "<br>Positivity Rate:", round(daily_positive_tested$positive_rate*100, 2), "%",
                         "<br>Average Daily Cases:",daily_positive_tested$avg_positive,
                         "<br>Average Daily Tests:",daily_positive_tested$avg_tested)),
      marker = list(
        color = daily_positive_tested$positive_rate,
        colorscale = 'Viridis',
        colorbar = list(
          title = list(
            text = 'Positivity Rate'
          )
        ),
        size = 10,
        opacity = 0.7
      )
    )
  ),
  label = "All Months"
)

for (i in 1:length(unique_months)) {
  month_data <- daily_positive_tested %>% filter(Month == unique_months[i])
  
  if (nrow(month_data) > 0) {
    buttons[[i + 1]] <- list(
      method = "update",
      args = list(
        list(
          x = list(month_data$avg_positive),
          y = list(month_data$avg_tested),
          text = list(paste("Country:", month_data$Country_Region, 
                           "<br>Month:", month_data$Month,
                           "<br>Positivity Rate:", round(month_data$positive_rate*100, 2), "%",
                           "<br>Average Daily Cases:", month_data$avg_positive,
                           "<br>Average Daily Tests:",month_data$avg_tested)),
          marker = list(
            color = month_data$positive_rate,
            colorscale = 'Viridis',
            colorbar = list(
              title = list(
                text = 'Positivity Rate'
              )
            ),
            size = 10,
            opacity = 0.7
          )
        )
      ),
      label = unique_months[i]
    )
  }
}

interactive_plot <- interactive_plot %>% layout(
  updatemenus = list(
    list(
      active = 0,
      buttons = buttons,
      direction = "down",
      showactive = TRUE
    )
  )
)

interactive_plot
```

## Column 2 {width="40%"}

```{r}
#| title: Percent of Population Hospitalized Over Time

hospital_data <- read.csv("tested_worldwide.csv") %>%
  mutate(
    Date = as.Date(Date),
    hospitalizedCurr = as.numeric(hospitalizedCurr),
    Month = format(Date, "%Y-%m")
  ) %>%
  filter(!is.na(hospitalizedCurr)) %>%
  group_by(Date, Month, Country_Region) %>%
  summarise(current_hospitalized = sum(hospitalizedCurr, na.rm = TRUE), .groups = "drop")

population_data <- read.csv("world_population.csv") %>%
  select(Country = Country.Territory, Population2020 = X2020.Population) %>%
  mutate(Population2020 = as.numeric(gsub(",", "", Population2020)))

merged_data <- hospital_data %>%
  left_join(population_data, by = c("Country_Region" = "Country")) %>%
  filter(!is.na(Population2020)) %>%
  mutate(hospitalized_pct = (current_hospitalized / Population2020) * 100) %>% 
  filter(!Country_Region %in% c("Armenia", "Singapore"))

months <- sort(unique(merged_data$Month))
countries <- unique(merged_data$Country_Region)

hosp_interactive <- plot_ly()
trace_count <- 0
for (month in months) {
  for (country in countries) {
    country_data <- merged_data %>%
      filter(Country_Region == country, Month == month)
    
    hosp_interactive <- hosp_interactive %>%
      add_trace(
        x = country_data$Date,
        y = country_data$hospitalized_pct,
        type = "scatter",
        mode = "lines+markers",
        name = country,
        visible = ifelse(month == months[1], TRUE, FALSE)
      )
    trace_count <- trace_count + 1
  }
}

dropdown_buttons <- list()

dropdown_buttons[[1]] <- list(
  method = "restyle",
  args = list("visible", rep(TRUE, trace_count)),
  label = "All Months"
)

for (i in seq_along(months)) {
  vis <- rep(FALSE, trace_count)
  vis[((i - 1) * length(countries) + 1):(i * length(countries))] <- TRUE
  dropdown_buttons[[i + 1]] <- list(
    method = "restyle",
    args = list("visible", vis),
    label = months[i]
  )
}

hosp_interactive <- hosp_interactive %>%
  layout(
    xaxis = list(title = "Date"),
    yaxis = list(title = "Hospitalizations (Percent of Population)"),
    hovermode = "compare",
    updatemenus = list(
      list(
        buttons = dropdown_buttons,
        direction = "down",
        showactive = TRUE,
        x = 0,       # Move to left
        y = 1.2,     # Move to top
        xanchor = "left",
        yanchor = "top"
      )
    )
  )

hosp_interactive

```

```{r}
#| title: Cumulative Deaths Over Time

death_data <- read.csv("tested_worldwide.csv") %>%
  mutate(
    Date = as.Date(Date),
    death = as.numeric(death)
  ) %>%
  filter(!is.na(death)) %>%
  filter(!Country_Region %in% "Canada") %>% 
  group_by(Date, Country_Region) %>%
  summarise(death = sum(death, na.rm = TRUE), .groups = "drop")

countries <- unique(death_data$Country_Region)

deaths_interactive <- plot_ly()

for (country in countries) {
  df <- death_data %>% filter(Country_Region == country)
  
  deaths_interactive <- add_trace(deaths_interactive,
                 data = df,
                 x = ~Date,
                 y = ~death,
                 type = 'scatter',
                 mode = 'lines+markers',
                 name = country,
                 text = ~paste("Country:", Country_Region,
                               "<br>Date:", Date,
                               "<br>Deaths:", death),
                 hoverinfo = "text")
}

deaths_interactive <- layout(deaths_interactive,
            title = "COVID Deaths Over Time",
            xaxis = list(title = "Date"),
            yaxis = list(title = "Cumulative Deaths"),
            hovermode = "compare")

deaths_interactive
```

# About

## Column 1 {width="60%"}

Overview of the dataset:

The dataset we are using for Project 3 is titled “COVID19 Worldwide Testing Data” and found here: <https://www.kaggle.com/datasets/lin0li/covid19testing>. This dataset contains information about the number of positive cases, hospitalizations, and deaths – daily and cumulatively – across different countries between 1/15/2020 and 11/8/2020. The dataset has 12 columns and 27641 rows. However, several rows are incomplete (ex. missing hospital, testing, and death data), and the dataset only includes 100 countries. It is also important to remember that the absence of testing does not mean the absence of COVID-19.

Project goals:

Our project focuses on testing, hospitalizations, and deaths. Specifically, we wanted to answer the questions:

1.  What is the relationship between positivity and testing rates?
2.  How did hospitalizations as the a percent of the population change across time for each country?
3.  How did cumulative deaths change across time for each country?

Key insights:

1.  Over time, the number of daily COVID-19 tests increased and then dropped off significantly. The drop off at the end likely is due to less data being gathered.
2.  Of the 24 countries with valid cumulative death data, the United States has a significantly high death toll.
3.  There is a weak positive correlation between the total number of tests and the total number of deaths for each country.

## Column 2 {width="40%"}

```{r}
knitr::opts_chunk$set(
  echo    = FALSE,
  message = FALSE,
  warning = FALSE
)

library(tidyverse)
```

```{r}
covid_data <- read_csv("tested_worldwide.csv") %>%
  mutate(Date = as.Date(Date, format = "%m/%d/%Y"))
```

```{r}

global_tests <- covid_data %>% 
  group_by(Date) %>% 
  summarize(total_tests = sum(daily_tested, na.rm = TRUE))

ggplot(global_tests, aes(x = Date, y = total_tests)) +
  geom_line(color = "#2C3E50", size = 1) +
  scale_y_continuous(labels = scales:: comma) +
  labs(
    title = "Global Daily COVID-19 Tests",
    x = "Date",
    y = "Number of Tests"
  ) +
  theme_minimal()
```

```{r}
top_deaths <- covid_data %>%
  filter(Province_State == "All States") %>%
  group_by (Country_Region) %>% 
  summarize (cum_deaths = max(death, na.rm = TRUE)) %>%
  arrange(desc(cum_deaths)) %>%
  slice_head(n = 10)

ggplot(top_deaths, aes(x = reorder(Country_Region, cum_deaths), y = cum_deaths)) +
  geom_col(fill = "#E74C3C") + 
  coord_flip() +
  scale_y_continuous(labels = scales:: comma) +
  labs(
    title = "Top 10 Countries by Cumulative COVID-19 Deaths",
    x = NULL, 
    y = "Deaths"
  ) +
  theme_minimal()
```

```{r}
snapshot <- covid_data %>%
  filter(Province_State == "All States") %>%
  group_by(Country_Region) %>%
  summarize(
    total_tests = max(total_tested, na.rm = TRUE),
    total_deaths = max(death, na.rm = TRUE)
  ) %>%
  filter(total_tests > 0, total_deaths > 0)
  
ggplot(snapshot, aes(x = total_tests, y = total_deaths)) +
  geom_point(color = "#2C3E50", alpha = 0.9, size =2) +
  scale_x_log10(labels = scales:: comma) +
  scale_y_log10(labels = scales:: comma) +
  labs(
    title = ("Cumulative Tests vs Deaths by Country"),
    x = "Total Tests (log scale)",
    y = "Total Deaths (log scale)"
  ) +
  theme_minimal()
```
